what is trigger?
  Triggers are special kinds of stored procedures that get fired in response to a specific event. This events are insert, 
  delete, and update

What they are used for/where they are important?
  1. Trigger is uses to enforce referential integrity: 
  2. creating audits trails to event:
  3. create functionality similar to check constraint: 
  4. substutiting your own statement in places of users action statement: 

Types of Trigger?
  1. DML Trigger (After Trigger)
  2. DDL Trigger (For Trigger) 


What are Magic Tables? (Inserted/deleted tables)
	https://www.c-sharpcorner.com/blogs/what-is-magic-table-in-sql-server1
	
	1. Magic tables are nothing but inserted and deleted which are temporary objects created by the server internally 
	to hold recently inserted values in the case of insert and to hold recently deleted values in the case of delete, 
	to hold before updating values or after updating values in the case of update.

	Let us suppose if we write a trigger on the table on insert or delete or update. So on insertion of a record into that table, 
	the inserted table will be created automatically by the database, on deletion of record from that table; the deleted table will be created automatically by the database.

	2. These two tables, inserted and deleted, are called magic tables.

	3. Magic tables are used to put all the deleted and updated rows. We can retrieve the column values from the deleted rows using 
	the keyword "deleted".

	4. These are not physical tables, only internal tables. 
	5. This Magic table is used In SQL Server 6.5, 7.0 & 2000 versions with Triggers only. 
	6. But, In SQL Server 2005, 2008 & 2008 R2 Versions can use these Magic tables with Triggers and Non-Triggers also. 
	
	7. Using with Triggers: 

	If you have implemented any trigger for any Tables then, Whenever you insert a record into a table, that record will be in the 
	INSERTED Magic table.
	Whenever you update the record in that table, that existing record will be in the DELETED Magic table and the 
	modified new data with be in the INSERTED Magic table.
	Whenever you delete a record in that table, that record will be in the DELETED Magic table only.
	
	These magic tables are used inside the Triggers for tracking the data transaction.

	8. Using Non-Triggers: 

	You can also use the Magic tables with Non-Trigger activities using OUTPUT Clause in SQL Server 2005, 2008 & 2008 R2 versions.
        delete from tableName
	OUTPUT deleted.* 
	
	9. We can copy records from the inserted and deleted table to a physical table. The table has to be created before. 
	 create table updatelog
	
	 --Then
	 Update table TableName
	 set col = value
	 output deleted.*, deleted.* into updatelog
	 where ColName = value

what are the drawbacks of trigger?


what is the difference b/n trigger and constraint? 


why trigger is better than contraint and where they are important than constraint?













-----------------CLASS NOTES------------------------------
----------------Trigger---------------
--1.DML Trigger (After Trigger) - Table/View Level
--3.DDL Trigger (For Trigger) - Database/Instance Level


-----------DML Trigger-----------------
drop table if exists MyEmployee

create table MyEmployee 
(
	EmpID int primary key, 
	FirstName varchar(50) not null,
	MiddleName varchar(20),
	LastName varchar(50) not null, 
	SSN VARCHAR(11) NOT NULL, 
	DOB date,
	Gender char(1),
)

drop table if exists MyEmployeePayment
create table MyEmployeePayment
(
	PaymentID int primary key,
	EmpID int not null ,--foreign key references MyEmployee(EmpID),
	EffectiveDate date not null,
	EndDate date,
	Payment money not null 
)


--begin transaction (IMplicit/Explicit Transaction)
	--Compiler Data Validation
		--Constraint validation
			--DML Activity (Insert/delete/update)
				--Fire trigger associated with Insert/delete/update
					--Commit transaction 

alter trigger tr_i_MyEmployee on MyEmployee
after insert, update
as
begin
	declare @SSN varchar(11);
	declare @DOB varchar(10);
	declare @Gender char(1);

	select @SSN=SSN,@DOB=DOB,@Gender=Gender from inserted;

	if len(@SSN) <> 11 
	begin
		raiserror('Invalid SSN !!!',16, 1);
		rollback transaction;
	end

	--if (isdate(@DOB) = 0)
	--begin
	--	raiserror('Invalid DOB !!!',16, 1);
	--	rollback transaction;
	--end

	if not (@Gender = 'M' or @Gender='F') 
	begin
		raiserror('Invalid Gender !!!',16, 1);
		rollback transaction;
	end

	return;
end

insert into MyEmployee (EmpID,FirstName,MiddleName,LastName,SSN,DOB,Gender)
values (1,'Lisa', null, 'George', '123-45-6789', '1/1/1980', 'F');

insert into MyEmployee (EmpID,FirstName,MiddleName,LastName,SSN,DOB,Gender)
values (2,'Eric', null, 'Weist', '435098976', '12/12/1980', 'M');

insert into MyEmployee (EmpID,FirstName,MiddleName,LastName,SSN,DOB,Gender)
values (3,'Shannon', null, 'Mathews', '546-99-0087', '17/18/2004', 'F');

select * from MyEmployee 

--------
create trigger tr_d_MyEmployee on MyEmployee
after delete
as
begin 
	declare @EmpID int;
	select @EmpID=EmpID from deleted;

	--if exists(select * from MyEmployeePayment where empid = @EmpID)
	--begin
	--	raiserror('You cannot delete an employee while payment information is available !!!',16, 1);
	--	rollback transaction;
	--end
	
	delete from MyEmployeePayment where empid = @EmpID

end

----------
drop table MyEmployeeUpdateLog
create table MyEmployeeUpdateLog
(
	LogInfo varchar(1000), 
	EventTimeStamp datetime
)

create trigger tr_d_MyEmployee_2 on MyEmployee
after delete
as
begin
	declare @EmpID int;
	select @EmpID=EmpID from deleted;

	if exists(select * from MyEmployeePayment where empid = @EmpID)
	begin
		insert into MyEmployeeUpdateLog (LogInfo,EventTimeStamp)
		values ('Corresponding payment records are deleted.',getdate())
	end

end

----------------------
insert into MyEmployeePayment (PaymentID,EmpID,EffectiveDate,EndDate,Payment)
values (1,1,'1/1/2018',null,45000.00)

select * from MyEmployee
select * from MyEmployeePayment

delete from MyEmployee where empid = 1

select * from MyEmployeeUpdateLog 

