what is trigger?
  Triggers are special kinds of stored procedures that get fired in response to a specific event. This events are insert, 
  delete, and update

What they are used for/where they are important?
  1. Trigger is uses to enforce referential integrity: 
  2. creating audits trails to event:
  3. create functionality similar to check constraint: 
  4. substutiting your own statement in places of users action statement: 

Types of Trigger?
  1. DML Trigger (After Trigger)
  2. DDL Trigger (For Trigger) 
  
what are the drawbacks of trigger?


what is the difference b/n trigger and constraint? 


why trigger is better than contraint and where they are important than constraint?













-----------------CLASS NOTES------------------------------
----------------Trigger---------------
--1.DML Trigger (After Trigger) - Table/View Level
--3.DDL Trigger (For Trigger) - Database/Instance Level


-----------DML Trigger-----------------
drop table if exists MyEmployee

create table MyEmployee 
(
	EmpID int primary key, 
	FirstName varchar(50) not null,
	MiddleName varchar(20),
	LastName varchar(50) not null, 
	SSN VARCHAR(11) NOT NULL, 
	DOB date,
	Gender char(1),
)

drop table if exists MyEmployeePayment
create table MyEmployeePayment
(
	PaymentID int primary key,
	EmpID int not null ,--foreign key references MyEmployee(EmpID),
	EffectiveDate date not null,
	EndDate date,
	Payment money not null 
)


--begin transaction (IMplicit/Explicit Transaction)
	--Compiler Data Validation
		--Constraint validation
			--DML Activity (Insert/delete/update)
				--Fire trigger associated with Insert/delete/update
					--Commit transaction 

alter trigger tr_i_MyEmployee on MyEmployee
after insert, update
as
begin
	declare @SSN varchar(11);
	declare @DOB varchar(10);
	declare @Gender char(1);

	select @SSN=SSN,@DOB=DOB,@Gender=Gender from inserted;

	if len(@SSN) <> 11 
	begin
		raiserror('Invalid SSN !!!',16, 1);
		rollback transaction;
	end

	--if (isdate(@DOB) = 0)
	--begin
	--	raiserror('Invalid DOB !!!',16, 1);
	--	rollback transaction;
	--end

	if not (@Gender = 'M' or @Gender='F') 
	begin
		raiserror('Invalid Gender !!!',16, 1);
		rollback transaction;
	end

	return;
end

insert into MyEmployee (EmpID,FirstName,MiddleName,LastName,SSN,DOB,Gender)
values (1,'Lisa', null, 'George', '123-45-6789', '1/1/1980', 'F');

insert into MyEmployee (EmpID,FirstName,MiddleName,LastName,SSN,DOB,Gender)
values (2,'Eric', null, 'Weist', '435098976', '12/12/1980', 'M');

insert into MyEmployee (EmpID,FirstName,MiddleName,LastName,SSN,DOB,Gender)
values (3,'Shannon', null, 'Mathews', '546-99-0087', '17/18/2004', 'F');

select * from MyEmployee 

--------
create trigger tr_d_MyEmployee on MyEmployee
after delete
as
begin 
	declare @EmpID int;
	select @EmpID=EmpID from deleted;

	--if exists(select * from MyEmployeePayment where empid = @EmpID)
	--begin
	--	raiserror('You cannot delete an employee while payment information is available !!!',16, 1);
	--	rollback transaction;
	--end
	
	delete from MyEmployeePayment where empid = @EmpID

end

----------
drop table MyEmployeeUpdateLog
create table MyEmployeeUpdateLog
(
	LogInfo varchar(1000), 
	EventTimeStamp datetime
)

create trigger tr_d_MyEmployee_2 on MyEmployee
after delete
as
begin
	declare @EmpID int;
	select @EmpID=EmpID from deleted;

	if exists(select * from MyEmployeePayment where empid = @EmpID)
	begin
		insert into MyEmployeeUpdateLog (LogInfo,EventTimeStamp)
		values ('Corresponding payment records are deleted.',getdate())
	end

end

----------------------
insert into MyEmployeePayment (PaymentID,EmpID,EffectiveDate,EndDate,Payment)
values (1,1,'1/1/2018',null,45000.00)

select * from MyEmployee
select * from MyEmployeePayment

delete from MyEmployee where empid = 1

select * from MyEmployeeUpdateLog 

